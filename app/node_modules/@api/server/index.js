const http = require('http')

const Koa = require('koa')
const bodyParser = require('koa-bodyparser')
const Router = require('@koa/router')

const pubsub = require('@dpassarelli/topico')
pubsub.addTopic('SERVER')

const definedRoutes = require('@api/route-handlers')

const _ = new WeakMap()

class HttpListener {
  constructor () {
    const listener = new Koa()

    const router = new Router()

    definedRoutes.forEach((route) => {
      switch (route.method) {
        case 'GET':
          router.get(route.endpoint, route.handler)
          break
      }
    })

    listener.use(bodyParser())
    listener.use(require('./middleware/request-id.js'))
    listener.use(router.routes())

    _.set(this, listener)
  }

  start (port) {
    pubsub.say(pubsub.topics.SERVER, 'starting HTTP server...')

    return new Promise((resolve, reject) => {
      const listener = _.get(this)
      const server = http.createServer(listener.callback())

      server.once('listening', () => {
        const { address, port } = server.address()
        pubsub.say(pubsub.topics.SERVER, `listening for messages at ${address}:${port}`)
        _.set(this, server)
        resolve()
      })

      server.once('error', (err) => {
        reject(err)
      })

      server.listen(port)
    })
  }
}

module.exports = HttpListener
