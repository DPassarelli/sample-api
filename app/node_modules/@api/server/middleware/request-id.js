const pubsub = require('@dpassarelli/topico')
const { ulid } = require('ulid')

const _ = new Set()

module.exports = async (ctx, next) => {
  /**
   * Assign a new identifier to this request. If the identifier has already
   * been allocated (based on timing), then wait until a new one is available.
   */
  let newId = ulid().substring(0, 10)

  while (_.has(newId)) {
    newId = ulid().substring(0, 10)
  }

  _.add(newId)
  ctx.state.requestId = newId

  pubsub.say(
    pubsub.topics.SERVER,
    {
      reqId: newId,
      request: ctx.request
    }
  )

  try {
    await next()
  } finally {
    pubsub.say(
      pubsub.topics.SERVER,
      {
        reqId: newId,
        response: ctx.response
      }
    )

    /**
     * Once the request has been processed, the identifier can be forgotten. This
     * should prevent the Set from growing unbounded.
     */
    _.delete(newId)
  }
}
